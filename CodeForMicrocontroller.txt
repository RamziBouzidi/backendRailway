// ESP32 Arduino code for Wind Tunnel Microcontroller
// - Connects to WiFi
// - Connects to FastAPI WebSocket server
// - Receives settings_update and updateMicro messages
// - Controls fan (wind speed) and device on/off
// - Sends drag_force and down_force to server

#include <WiFi.h>
#include <WebSocketsClient.h>
#include <ArduinoJson.h>
#include "HX711.h"

// --- WiFi credentials ---
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// --- WebSocket server config ---
// Replace with your server's IP or domain and port
const char* ws_host = "192.168.1.106"; // or ngrok/railway domain
const uint16_t ws_port = 8000;
const char* ws_path = "/ws/microcontroller";

// --- Fan (PWM) config ---
const int fanPin = 16;  // GPIO16
const int freq = 25000; // 25 kHz
const int pwmChannel = 0;
const int resolution = 8; // 8-bit (0-255)

// --- HX711 config ---
const int LOADCELL_DOUT_PIN_1 = 16;
const int LOADCELL_SCK_PIN_1 = 4;
const int LOADCELL_DOUT_PIN_2 = 5;
const int LOADCELL_SCK_PIN_2 = 17;
HX711 scale1;
HX711 scale2;

// --- State variables ---
bool device_on = false;
float wind_speed = 0.0;

WebSocketsClient webSocket;

void handleSettingsUpdate(JsonObject& obj) {
  if (obj.containsKey("device_on")) {
    device_on = obj["device_on"];
    Serial.print("Device ON: "); Serial.println(device_on);
  }
  if (obj.containsKey("wind_speed")) {
    wind_speed = obj["wind_speed"];
    Serial.print("Wind Speed: "); Serial.println(wind_speed);
    // Map wind_speed (0.0-1.0) to PWM (0-255)
    int duty = (int)(wind_speed * 255.0);
    ledcWrite(pwmChannel, device_on ? duty : 0);
  }
  // If device is off, turn off fan
  if (!device_on) {
    ledcWrite(pwmChannel, 0);
  }
}

void handleUpdateMicro(JsonObject& obj) {
  Serial.println("Received updateMicro message:");
  serializeJsonPretty(obj, Serial);
  // You can add logic here to handle dependency updates, etc.
}

void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
  if (type == WStype_TEXT) {
    DynamicJsonDocument doc(1024);
    DeserializationError err = deserializeJson(doc, payload, length);
    if (err) {
      Serial.print("JSON parse error: "); Serial.println(err.c_str());
      return;
    }
    if (!doc.containsKey("type")) return;
    String msgType = doc["type"].as<String>();
    if (msgType == "settings_update") {
      handleSettingsUpdate(doc.as<JsonObject>());
    } else if (msgType == "updateMicro") {
      handleUpdateMicro(doc.as<JsonObject>());
    }
  }
}

void sendForceData() {
  if (device_on && scale1.is_ready() && scale2.is_ready()) {
    long drag_force = scale1.read();
    long down_force = scale2.read();
    DynamicJsonDocument doc(256);
    doc["drag_force"] = drag_force;
    doc["down_force"] = down_force;
    String json;
    serializeJson(doc, json);
    webSocket.sendTXT(json);
    Serial.print("Sent drag_force: "); Serial.print(drag_force);
    Serial.print(", down_force: "); Serial.println(down_force);
  }
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  // WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");
  Serial.print("IP: "); Serial.println(WiFi.localIP());

  // Fan PWM
  ledcSetup(pwmChannel, freq, resolution);
  ledcAttachPin(fanPin, pwmChannel);
  ledcWrite(pwmChannel, 0);

  // HX711
  scale1.begin(LOADCELL_DOUT_PIN_1, LOADCELL_SCK_PIN_1);
  scale2.begin(LOADCELL_DOUT_PIN_2, LOADCELL_SCK_PIN_2);
  scale1.set_gain(128);
  scale2.set_gain(128);

  // WebSocket
  webSocket.begin(ws_host, ws_port, ws_path);
  webSocket.onEvent(webSocketEvent);
  webSocket.setReconnectInterval(5000);
}

unsigned long lastSend = 0;
const unsigned long sendInterval = 500; // ms

void loop() {
  webSocket.loop();
  // Send force data periodically if device is on
  unsigned long now = millis();
  if (now - lastSend > sendInterval) {
    sendForceData();
    lastSend = now;
  }
}
